int -> INT
incremento2 -> IDENTIFIER
( -> OPEN_PAREN
int -> INT
num -> IDENTIFIER
, -> COMMA
string -> STRING
hola -> IDENTIFIER
, -> COMMA
char -> CHAR
aaaa -> IDENTIFIER
, -> COMMA
bool -> BOOL
ok -> IDENTIFIER
) -> CLOSE_PAREN
{ -> OPEN_KEY
int -> INT
numero -> IDENTIFIER
= -> EQUAL
num -> IDENTIFIER
- -> MINUS
- -> MINUS
34 -> INTEGER
/ -> DIVIDE
10 -> INTEGER
~ -> MODULE
( -> OPEN_PAREN
10 -> INTEGER
+ -> PLUS
14 -> INTEGER
- -> MINUS
80 -> INTEGER
) -> CLOSE_PAREN
; -> FINAL
float -> FLOAT
miReal -> IDENTIFIER
= -> EQUAL
10.5 -> DECIMAL
** -> POWER
3.5 -> DECIMAL
; -> FINAL
return -> RETURN
numero -> IDENTIFIER
; -> FINAL
int -> INT
arreglo -> IDENTIFIER
[ -> OPEN_BRACKET
3 -> INTEGER
] -> CLOSE_BRACKET
; -> FINAL
int -> INT
otroArreglo -> IDENTIFIER
[ -> OPEN_BRACKET
7 -> INTEGER
] -> CLOSE_BRACKET
; -> FINAL
} -> CLOSE_KEY
char -> CHAR
extra -> IDENTIFIER
( -> OPEN_PAREN
int -> INT
carro -> IDENTIFIER
) -> CLOSE_PAREN
{ -> OPEN_KEY
if -> IF
( -> OPEN_PAREN
23 -> INTEGER
> -> GREATER
24 -> INTEGER
== -> EQUAL_EQUAL
false -> FALSE
) -> CLOSE_PAREN
{ -> OPEN_KEY
return -> RETURN
'a' -> CHARACTER
; -> FINAL
} -> CLOSE_KEY
elif -> ELIF
( -> OPEN_PAREN
true -> TRUE
== -> EQUAL_EQUAL
false -> FALSE
) -> CLOSE_PAREN
{ -> OPEN_KEY
print -> PRINT
( -> OPEN_PAREN
"ok" -> CHARCHAIN
) -> CLOSE_PAREN
; -> FINAL
} -> CLOSE_KEY
elif -> ELIF
( -> OPEN_PAREN
true -> TRUE
!= -> DIFFERENT
false -> FALSE
) -> CLOSE_PAREN
{ -> OPEN_KEY
print -> PRINT
( -> OPEN_PAREN
"not" -> CHARCHAIN
) -> CLOSE_PAREN
; -> FINAL
} -> CLOSE_KEY
if -> IF
( -> OPEN_PAREN
true -> TRUE
) -> CLOSE_PAREN
{ -> OPEN_KEY
for -> FOR
( -> OPEN_PAREN
int -> INT
i -> IDENTIFIER
= -> EQUAL
0 -> INTEGER
; -> FINAL
i -> IDENTIFIER
<= -> MINOR_EQUAL
10 -> INTEGER
; -> FINAL
++ -> PLUS_PLUS
i -> IDENTIFIER
) -> CLOSE_PAREN
{ -> OPEN_KEY
if -> IF
( -> OPEN_PAREN
i -> IDENTIFIER
~ -> MODULE
2 -> INTEGER
== -> EQUAL_EQUAL
0 -> INTEGER
) -> CLOSE_PAREN
{ -> OPEN_KEY
break -> BREAK
; -> FINAL
} -> CLOSE_KEY
else -> ELSE
{ -> OPEN_KEY
print -> PRINT
( -> OPEN_PAREN
34.5 -> DECIMAL
) -> CLOSE_PAREN
; -> FINAL
} -> CLOSE_KEY
} -> CLOSE_KEY
} -> CLOSE_KEY
else -> ELSE
{ -> OPEN_KEY
int -> INT
x -> IDENTIFIER
; -> FINAL
} -> CLOSE_KEY
return -> RETURN
'b' -> CHARACTER
; -> FINAL
} -> CLOSE_KEY
int -> INT
main -> MAIN
( -> OPEN_PAREN
) -> CLOSE_PAREN
{ -> OPEN_KEY
string -> STRING
str1 -> IDENTIFIER
= -> EQUAL
"Hola MUndo ^ { } % * + - -- ++ $" -> CHARCHAIN
; -> FINAL
bool -> BOOL
miBoolean2 -> IDENTIFIER
= -> EQUAL
not -> NOT
( -> OPEN_PAREN
false -> FALSE
) -> CLOSE_PAREN
; -> FINAL
miBoolean2 -> IDENTIFIER
= -> EQUAL
not -> NOT
( -> OPEN_PAREN
miBoolean2 -> IDENTIFIER
) -> CLOSE_PAREN
!= -> DIFFERENT
true -> TRUE
; -> FINAL
print -> PRINT
( -> OPEN_PAREN
str1 -> IDENTIFIER
) -> CLOSE_PAREN
; -> FINAL
read -> READ
( -> OPEN_PAREN
str1 -> IDENTIFIER
) -> CLOSE_PAREN
; -> FINAL
print -> PRINT
( -> OPEN_PAREN
"Hola mundo" -> CHARCHAIN
) -> CLOSE_PAREN
; -> FINAL
print -> PRINT
( -> OPEN_PAREN
str1 -> IDENTIFIER
) -> CLOSE_PAREN
; -> FINAL
float -> FLOAT
flo1 -> IDENTIFIER
= -> EQUAL
4.6 -> DECIMAL
; -> FINAL
print -> PRINT
( -> OPEN_PAREN
flo1 -> IDENTIFIER
) -> CLOSE_PAREN
; -> FINAL
read -> READ
( -> OPEN_PAREN
str1 -> IDENTIFIER
) -> CLOSE_PAREN
; -> FINAL
56 -> INTEGER
+ -> PLUS
34 -> INTEGER
; -> FINAL
extra -> IDENTIFIER
( -> OPEN_PAREN
2 -> INTEGER
) -> CLOSE_PAREN
; -> FINAL
return -> RETURN
1 -> INTEGER
; -> FINAL
} -> CLOSE_KEY
