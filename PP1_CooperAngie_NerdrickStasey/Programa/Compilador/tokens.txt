int -> INT
resta -> IDENTIFIER
( -> OPEN_PAREN
int -> INT
v -> IDENTIFIER
, -> COMMA
int -> INT
m -> IDENTIFIER
) -> CLOSE_PAREN
{ -> OPEN_KEY
print -> PRINT
( -> OPEN_PAREN
v -> IDENTIFIER
) -> CLOSE_PAREN
; -> FINAL
if -> IF
( -> OPEN_PAREN
v -> IDENTIFIER
== -> EQUAL_EQUAL
7 -> INTEGER
) -> CLOSE_PAREN
{ -> OPEN_KEY
int -> INT
x -> IDENTIFIER
= -> EQUAL
v -> IDENTIFIER
+ -> PLUS
m -> IDENTIFIER
; -> FINAL
} -> CLOSE_KEY
elif -> ELIF
( -> OPEN_PAREN
v -> IDENTIFIER
== -> EQUAL_EQUAL
8 -> INTEGER
) -> CLOSE_PAREN
{ -> OPEN_KEY
int -> INT
u -> IDENTIFIER
= -> EQUAL
v -> IDENTIFIER
+ -> PLUS
1 -> INTEGER
; -> FINAL
} -> CLOSE_KEY
elif -> ELIF
( -> OPEN_PAREN
v -> IDENTIFIER
== -> EQUAL_EQUAL
9 -> INTEGER
) -> CLOSE_PAREN
{ -> OPEN_KEY
int -> INT
o -> IDENTIFIER
= -> EQUAL
m -> IDENTIFIER
+ -> PLUS
2 -> INTEGER
; -> FINAL
} -> CLOSE_KEY
else -> ELSE
{ -> OPEN_KEY
int -> INT
y -> IDENTIFIER
= -> EQUAL
m -> IDENTIFIER
+ -> PLUS
v -> IDENTIFIER
; -> FINAL
} -> CLOSE_KEY
return -> RETURN
1 -> INTEGER
; -> FINAL
} -> CLOSE_KEY
int -> INT
main -> MAIN
( -> OPEN_PAREN
) -> CLOSE_PAREN
{ -> OPEN_KEY
resta -> IDENTIFIER
( -> OPEN_PAREN
2 -> INTEGER
, -> COMMA
5 -> INTEGER
) -> CLOSE_PAREN
; -> FINAL
return -> RETURN
1 -> INTEGER
; -> FINAL
} -> CLOSE_KEY
