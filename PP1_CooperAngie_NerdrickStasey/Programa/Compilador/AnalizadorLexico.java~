/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

package compilador;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.io.FileWriter;
import java.io.BufferedWriter ;
      

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>alexico.flex</tt>
 */
class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\12\1\7\1\11\1\11\1\10\22\0\1\12\1\35\1\5"+
    "\3\0\1\36\1\6\1\26\1\27\1\14\1\30\1\15\1\31\1\1"+
    "\1\13\1\2\11\3\1\21\1\16\1\34\1\17\1\33\1\20\1\0"+
    "\32\4\1\24\1\0\1\25\3\0\1\41\1\56\1\57\1\51\1\47"+
    "\1\53\1\61\1\60\1\42\1\4\1\62\1\54\1\40\1\43\1\44"+
    "\1\52\1\4\1\46\1\55\1\45\1\50\5\4\1\22\1\37\1\23"+
    "\1\32\6\0\1\11\u1fa2\0\1\11\1\11\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\2\1\2\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\1\1\27\1\30\13\3\2\0\1\31\1\0\1\4"+
    "\1\0\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\2\3\1\41\15\3\1\42\1\43\2\0\1\3\1\44"+
    "\1\45\10\3\1\46\5\3\2\0\1\4\1\47\1\50"+
    "\1\51\1\52\1\3\1\53\1\54\4\3\1\55\1\3"+
    "\1\56\1\3\1\57\1\60\1\61\1\3\1\62\1\63"+
    "\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[116];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\63"+
    "\0\u0165\0\u0198\0\u01cb\0\63\0\63\0\u01fe\0\63\0\63"+
    "\0\63\0\63\0\63\0\63\0\63\0\63\0\u0231\0\u0264"+
    "\0\63\0\u0297\0\u02ca\0\u02fd\0\63\0\63\0\u0330\0\u0363"+
    "\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495\0\u04c8\0\u04fb"+
    "\0\u052e\0\u0561\0\377\0\63\0\u0594\0\u05c7\0\u05fa\0\63"+
    "\0\63\0\63\0\63\0\63\0\63\0\63\0\u062d\0\u0660"+
    "\0\314\0\u0693\0\u06c6\0\u06f9\0\u072c\0\u075f\0\u0792\0\u07c5"+
    "\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u0561\0\63"+
    "\0\u092a\0\u095d\0\u0990\0\314\0\314\0\u09c3\0\u09f6\0\u0a29"+
    "\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\314\0\u0b5b\0\u0b8e"+
    "\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0c8d\0\314\0\314"+
    "\0\314\0\314\0\u0cc0\0\314\0\314\0\u0cf3\0\u0d26\0\u0d59"+
    "\0\u0d8c\0\314\0\u0dbf\0\314\0\u0df2\0\314\0\314\0\314"+
    "\0\u0e25\0\314\0\314\0\314";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[116];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\2\1\10\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\5\1\40\1\41\1\5\1\42\1\43\1\44\2\5"+
    "\1\45\1\46\1\5\1\47\1\50\1\51\3\5\64\0"+
    "\1\52\62\0\1\52\2\4\61\0\3\5\33\0\23\5"+
    "\5\53\1\54\55\53\7\55\3\0\51\55\7\0\1\10"+
    "\66\0\1\56\1\57\62\0\1\60\65\0\1\61\73\0"+
    "\1\62\63\0\1\63\50\0\1\64\62\0\1\65\62\0"+
    "\1\66\45\0\3\5\33\0\1\5\1\67\21\5\2\0"+
    "\3\5\33\0\3\5\1\70\7\5\1\71\7\5\2\0"+
    "\3\5\33\0\4\5\1\72\3\5\1\73\12\5\2\0"+
    "\3\5\33\0\6\5\1\74\14\5\2\0\3\5\33\0"+
    "\7\5\1\75\13\5\2\0\3\5\33\0\14\5\1\76"+
    "\6\5\2\0\3\5\33\0\6\5\1\77\14\5\2\0"+
    "\3\5\33\0\1\5\1\100\2\5\1\101\7\5\1\102"+
    "\6\5\2\0\3\5\33\0\5\5\1\103\15\5\2\0"+
    "\3\5\33\0\4\5\1\104\1\5\1\105\14\5\2\0"+
    "\3\5\33\0\20\5\1\106\2\5\2\0\2\107\65\0"+
    "\1\110\54\0\7\56\1\10\1\11\52\56\14\111\1\112"+
    "\46\111\2\0\3\5\33\0\2\5\1\113\20\5\2\0"+
    "\3\5\33\0\5\5\1\114\15\5\2\0\3\5\33\0"+
    "\5\5\1\115\15\5\2\0\3\5\33\0\14\5\1\116"+
    "\6\5\2\0\3\5\33\0\10\5\1\117\12\5\2\0"+
    "\3\5\33\0\1\5\1\120\3\5\1\121\15\5\2\0"+
    "\3\5\33\0\2\5\1\122\12\5\1\123\5\5\2\0"+
    "\3\5\33\0\2\5\1\124\20\5\2\0\3\5\33\0"+
    "\14\5\1\125\6\5\2\0\3\5\33\0\6\5\1\126"+
    "\14\5\2\0\3\5\33\0\4\5\1\127\16\5\2\0"+
    "\3\5\33\0\6\5\1\130\14\5\2\0\3\5\33\0"+
    "\4\5\1\131\16\5\2\0\3\5\33\0\7\5\1\132"+
    "\13\5\2\0\3\5\33\0\1\5\1\133\21\5\14\111"+
    "\1\134\46\111\13\135\1\136\1\112\46\135\2\0\3\5"+
    "\33\0\3\5\1\137\17\5\2\0\3\5\33\0\14\5"+
    "\1\140\6\5\2\0\3\5\33\0\7\5\1\141\13\5"+
    "\2\0\3\5\33\0\11\5\1\142\11\5\2\0\3\5"+
    "\33\0\10\5\1\143\12\5\2\0\3\5\33\0\13\5"+
    "\1\144\7\5\2\0\3\5\33\0\7\5\1\145\13\5"+
    "\2\0\3\5\33\0\3\5\1\146\17\5\2\0\3\5"+
    "\33\0\15\5\1\147\5\5\2\0\3\5\33\0\1\5"+
    "\1\150\21\5\2\0\3\5\33\0\2\5\1\151\20\5"+
    "\2\0\3\5\33\0\14\5\1\152\6\5\2\0\3\5"+
    "\33\0\1\5\1\153\21\5\2\0\3\5\33\0\6\5"+
    "\1\154\14\5\13\111\1\10\1\134\46\111\14\135\1\112"+
    "\46\135\2\0\3\5\33\0\6\5\1\155\14\5\2\0"+
    "\3\5\33\0\5\5\1\156\15\5\2\0\3\5\33\0"+
    "\7\5\1\157\13\5\2\0\3\5\33\0\5\5\1\160"+
    "\15\5\2\0\3\5\33\0\3\5\1\161\17\5\2\0"+
    "\3\5\33\0\22\5\1\162\2\0\3\5\33\0\3\5"+
    "\1\163\17\5\2\0\3\5\33\0\21\5\1\164\1\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3672];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\3\1\2\11\1\1\10\11"+
    "\2\1\1\11\3\1\2\11\13\1\2\0\1\11\1\0"+
    "\1\1\1\0\7\11\21\1\1\11\2\0\21\1\2\0"+
    "\27\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[116];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    ArrayList<String> identifiers = new ArrayList<String>();

    //  Guarda el tipo de token 
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    
    // Simbolo del token y su valor
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }

    private void GuardarToken (String t){
        if (identifiers.size() == 0 || identifiers.indexOf(t) < 0){
            System.out.print(t + " -> IDENTIFIER |Se guardará en la tabla de símbolos con nombre, tipo, valor, ámbito y rol \n");
            identifiers.add(t);
        }else{
            System.out.print(t + " -> IDENTIFIER \n");
        }
    }

    public static void guardarTokenTxt(String contenido, String ruta)
    {
      try {     
        FileWriter fichero = new FileWriter(ruta, true); 
        BufferedWriter writer = new BufferedWriter (fichero);
        writer.write(contenido);
        writer.close();

      } catch (Exception ew) {
        ew.printStackTrace();
      }
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalizadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  AnalizadorLexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 134) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { System.err.print("\nError Léxico -> Caracter ilegal <"+yytext()+"> Línea: "+yyline+" Columna: "+yycolumn+"\n");
          }
        case 53: break;
        case 2: 
          { System.out.print(yytext()+ " -> INTEGER\n"); 
                    guardarTokenTxt(yytext()+ " -> INTEGER\n", "tokens.txt");
                    return symbol(sym.INTEGER, new Integer(yytext()));
          }
        case 54: break;
        case 3: 
          { GuardarToken(yytext()); 
                    guardarTokenTxt(yytext()+ " -> IDENTIFIER\n", "tokens.txt");
                    return symbol(sym.IDENTIFIER, yytext());
          }
        case 55: break;
        case 4: 
          { /* ignora el espacio */
          }
        case 56: break;
        case 5: 
          { System.out.print("/ -> DIVIDE\n");
        guardarTokenTxt("/ -> DIVIDE\n", "tokens.txt");
        return symbol(sym.DIVIDE);
          }
        case 57: break;
        case 6: 
          { System.out.print("* -> MULTI\n");
        guardarTokenTxt("* -> MULTI\n", "tokens.txt");
        return symbol(sym.MULTI);
          }
        case 58: break;
        case 7: 
          { System.out.print(", -> COMMA\n"); 
        guardarTokenTxt(", -> COMMA\n", "tokens.txt");
        return symbol(sym.COMMA);
          }
        case 59: break;
        case 8: 
          { System.out.print("; -> FINAL\n"); 
        guardarTokenTxt("; -> FINAL\n", "tokens.txt");
        return symbol(sym.FINAL);
          }
        case 60: break;
        case 9: 
          { System.out.print("= -> EQUAL\n");
        guardarTokenTxt("= -> EQUAL\n", "tokens.txt");
        return symbol(sym.EQUAL);
          }
        case 61: break;
        case 10: 
          { System.out.print("? -> QUESTION\n"); guardarTokenTxt("? -> QUESTION\n", "tokens.txt"); return symbol(sym.QUESTION);
          }
        case 62: break;
        case 11: 
          { System.out.print(": -> POINT_POINT\n"); guardarTokenTxt(": -> POINT_POINT\n", "tokens.txt"); return symbol(sym.POINT_POINT);
          }
        case 63: break;
        case 12: 
          { System.out.print("{ -> OPEN_KEY\n"); 
        guardarTokenTxt("{ -> OPEN_KEY\n", "tokens.txt");
        return symbol(sym.OPEN_KEY);
          }
        case 64: break;
        case 13: 
          { System.out.print("} -> CLOSE_KEY\n"); 
        guardarTokenTxt("} -> CLOSE_KEY\n", "tokens.txt");
        return symbol(sym.CLOSE_KEY);
          }
        case 65: break;
        case 14: 
          { System.out.print("[ -> OPEN_BRACKET\n"); 
        guardarTokenTxt("[ -> OPEN_BRACKET\n", "tokens.txt");
        return symbol(sym.OPEN_BRACKET);
          }
        case 66: break;
        case 15: 
          { System.out.print("] -> CLOSE_BRACKET\n");
        guardarTokenTxt("] -> CLOSE_BRACKET\n", "tokens.txt");
        return symbol(sym.CLOSE_BRACKET);
          }
        case 67: break;
        case 16: 
          { System.out.print("( -> OPEN_PAREN\n");
        guardarTokenTxt("( -> OPEN_PAREN\n", "tokens.txt");
        return symbol(sym.OPEN_PAREN);
          }
        case 68: break;
        case 17: 
          { System.out.print(") -> CLOSE_PAREN\n"); 
        guardarTokenTxt(") -> CLOSE_PAREN\n", "tokens.txt");
        return symbol(sym.CLOSE_PAREN);
          }
        case 69: break;
        case 18: 
          { System.out.print("+ -> PLUS\n");
        guardarTokenTxt("+ -> PLUS\n", "tokens.txt");
        return symbol(sym.PLUS);
          }
        case 70: break;
        case 19: 
          { System.out.print("- -> MINUS\n");
        guardarTokenTxt("- -> MINUS\n", "tokens.txt");
        return symbol(sym.MINUS);
          }
        case 71: break;
        case 20: 
          { System.out.print("~ -> MODULE\n");
        guardarTokenTxt("~ -> MODULE\n", "tokens.txt");
        return symbol(sym.MODULE);
          }
        case 72: break;
        case 21: 
          { System.out.print("> -> GREATER\n");
        guardarTokenTxt("> -> GREATER\n", "tokens.txt");
        return symbol(sym.GREATER);
          }
        case 73: break;
        case 22: 
          { System.out.print("< -> MINOR\n");
        guardarTokenTxt("< -> MINOR\n", "tokens.txt");
        return symbol(sym.MINOR);
          }
        case 74: break;
        case 23: 
          { System.out.print("& -> AND\n");
        guardarTokenTxt("& -> AND\n", "tokens.txt");
        return symbol(sym.AND);
          }
        case 75: break;
        case 24: 
          { System.out.print("| -> OR\n");
        guardarTokenTxt("| -> OR\n", "tokens.txt");
        return symbol(sym.OR);
          }
        case 76: break;
        case 25: 
          { System.out.print(yytext() + " -> CHARCHAIN\n"); 
                    guardarTokenTxt(yytext()+ " -> CHARCHAIN\n", "tokens.txt");
                    return symbol(sym.CHARCHAIN, yytext());
          }
        case 77: break;
        case 26: 
          { System.out.print("** -> POWER\n");
        guardarTokenTxt("** -> POWER\n", "tokens.txt");
        return symbol(sym.POWER);
          }
        case 78: break;
        case 27: 
          { System.out.print("== -> EQUAL_EQUAL\n");
        guardarTokenTxt("== -> EQUAL_EQUAL\n", "tokens.txt");
        return symbol(sym.EQUAL_EQUAL);
          }
        case 79: break;
        case 28: 
          { System.out.print("++ -> PLUS_PLUS\n");
        guardarTokenTxt("++ -> PLUS_PLUS\n", "tokens.txt");
        return symbol(sym.PLUS_PLUS);
          }
        case 80: break;
        case 29: 
          { System.out.print("-- -> MINUS_MINUS\n");
        guardarTokenTxt("-- -> MINUS_MINUS\n", "tokens.txt");
        return symbol(sym.MINUS_MINUS);
          }
        case 81: break;
        case 30: 
          { System.out.print(">= -> GREATER_EQUAL\n");
        guardarTokenTxt(">= -> GREATER_EQUAL\n", "tokens.txt");
        return symbol(sym.GREATER_EQUAL);
          }
        case 82: break;
        case 31: 
          { System.out.print("<= -> MINOR_EQUAL\n");
        guardarTokenTxt("<= -> MINOR_EQUAL\n", "tokens.txt");
        return symbol(sym.MINOR_EQUAL);
          }
        case 83: break;
        case 32: 
          { System.out.print("!= -> DIFFERENT\n");
        guardarTokenTxt("!= -> DIFFERENT\n", "tokens.txt");
        return symbol(sym.DIFFERENT);
          }
        case 84: break;
        case 33: 
          { System.out.print("if -> IF\n"); 
        guardarTokenTxt("if -> IF\n", "tokens.txt");
        return symbol(sym.IF);
          }
        case 85: break;
        case 34: 
          { System.out.print(yytext()+ " -> DECIMAL\n"); 
                    guardarTokenTxt(yytext()+ " -> DECIMAL\n", "tokens.txt");
                    return symbol(sym.DECIMAL, new Double(yytext()));
          }
        case 86: break;
        case 35: 
          { System.out.print(yytext() + " -> CHARACTER\n");
                    guardarTokenTxt(yytext()+ " -> CHARACTER\n", "tokens.txt"); 
                    return symbol(sym.CHARACTER, yytext());
          }
        case 87: break;
        case 36: 
          { System.out.print("int -> INT\n"); 
        guardarTokenTxt("int -> INT\n", "tokens.txt");
        return symbol(sym.INT);
          }
        case 88: break;
        case 37: 
          { System.out.print("not -> NOT\n"); 
        guardarTokenTxt("not -> NOT\n", "tokens.txt");
        return symbol(sym.NOT);
          }
        case 89: break;
        case 38: 
          { System.out.print("for -> FOR\n");
        guardarTokenTxt("for -> FOR\n", "tokens.txt");
        return symbol(sym.FOR);
          }
        case 90: break;
        case 39: 
          { System.out.print("main -> MAIN\n");
        guardarTokenTxt("main -> MAIN\n", "tokens.txt");
        return symbol(sym.MAIN);
          }
        case 91: break;
        case 40: 
          { System.out.print("null -> NULL\n"); 
        guardarTokenTxt("null -> NULL\n", "tokens.txt");
        return symbol(sym.NULL);
          }
        case 92: break;
        case 41: 
          { System.out.print("true -> TRUE\n"); 
        guardarTokenTxt("true -> TRUE\n", "tokens.txt");
        return symbol(sym.TRUE);
          }
        case 93: break;
        case 42: 
          { System.out.print("read -> READ\n");
        guardarTokenTxt("read -> READ\n", "tokens.txt");
         return symbol(sym.READ);
          }
        case 94: break;
        case 43: 
          { System.out.print("elif -> ELIF\n");
        guardarTokenTxt("elif -> ELIF\n", "tokens.txt");
        return symbol(sym.ELIF);
          }
        case 95: break;
        case 44: 
          { System.out.print("else -> ELSE\n");
        guardarTokenTxt("else -> ELSE\n", "tokens.txt");
        return symbol(sym.ELSE);
          }
        case 96: break;
        case 45: 
          { System.out.print("bool -> BOOL\n"); 
        guardarTokenTxt("bool -> BOOL\n", "tokens.txt");
        return symbol(sym.BOOL);
          }
        case 97: break;
        case 46: 
          { System.out.print("char -> CHAR\n"); 
        guardarTokenTxt("char -> CHAR\n", "tokens.txt");
        return symbol(sym.CHAR);
          }
        case 98: break;
        case 47: 
          { System.out.print("print -> PRINT\n"); 
        guardarTokenTxt("print -> PRINT\n", "tokens.txt");
        return symbol(sym.PRINT);
          }
        case 99: break;
        case 48: 
          { System.out.print("false -> FALSE\n"); 
        guardarTokenTxt("false -> FALSE\n", "tokens.txt");
        return symbol(sym.FALSE);
          }
        case 100: break;
        case 49: 
          { System.out.print("float -> FLOAT\n");
        guardarTokenTxt("float -> FLOAT\n", "tokens.txt");
        return symbol(sym.FLOAT);
          }
        case 101: break;
        case 50: 
          { System.out.print("break -> BREAK\n");
        guardarTokenTxt("break -> BREAK\n", "tokens.txt");
        return symbol(sym.BREAK);
          }
        case 102: break;
        case 51: 
          { System.out.print("return -> RETURN\n"); 
        guardarTokenTxt("return -> RETURN\n", "tokens.txt");
        return symbol(sym.RETURN);
          }
        case 103: break;
        case 52: 
          { System.out.print("string -> STRING\n"); 
        guardarTokenTxt("string -> STRING\n", "tokens.txt");
        return symbol(sym.STRING);
          }
        case 104: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
